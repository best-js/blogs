找个伙伴做件牛 B 的事
----------

&nbsp;

想实现一个由来已久的创业设想，做一件值得托付后半生的大事，有人愿意跳进来一起弄吗？本文以日记形式记录我的梦想，所提内容长期有效。

我经常反思自己手头在做的事有没价值，新起一个点子，往往要搁上半年，想清楚后再动手。二年前（指 15 年一季度）经历了一段迷茫期，然后决定启动一个工作方向，就从这个方向谈起吧。

&nbsp;

&nbsp;

**15 年 5 月 30 日：为方便在一个技术群发起讨论，随手写了如下文字**

------------------

&nbsp;

昨天（指 15 年 5 月 29 日）受魏永民之邀专程从深圳赶到上海开会，本想好好做一次分享，但氛围不对，我就没细讲，现场把胶片各页简单展示了一下。

昨天讲了 Nest 产品为什么成功？这一项算是完整讲了的，大致 3 点，一是节能，每个家庭节约 30% 电费，这是刚需，比什么智能不智能都重要得多，二是有能力从电力公司分成，据近期披露的消息，他从电力公司分的钱已超过卖 Nest 的利润，牛 B 得无以形容，中国哪家民企从电力公司拿 1 分钱试试？第三，也是最具潜质的，它构建一套近端组网协议，在 ZigBee 之上建立 thread 规范，我想，Google 能用 32 亿刀现金收购它，主要因为这个，能帮助 Google 成为智能家居领域的标准领导者。

这3点，只要谁看清楚其中任何一项，早跳进来都有大把机会，可惜，4年前没谁看得清，还是让 iPod 之父把事情做成了。

有件同样牛B的事，有人愿意跳进来跟我一起玩吗？跳进来我再当面细讲，与咋天没分享成的东西有关。


### 1. 卡在一个地方

手机不是智能中心，“智能家居中心” 是中心，若在云端驻留一个，也是智能中心。这事本不该纠结，有人非得把手机当成智能中心，我后面要讲就全盘推翻了，完全没必要讲下去，所以，这里我不得不啰嗦几句。

就比如智能门锁，开门后，客厅的灯自动打开，如果手机是智能中心，大既这么用：用钥匙或门卡开门之前，先掏手机，解锁，耐心等待网络就绪，然后打开 APP。OK，你所做这些，仅仅为了开门后，客厅的灯自动打开而已，傻不傻逼！

再看一个亚马逊的 dash buttons

![dash buttons](md/res/D171023-01/amazon_dash.jpg)

这玩意书签一般大小，按下按钮就下订单，比如把 dash buttons 贴在洗手间放洗衣粉的地方，当你看到洗衣粉快没了，就按一下按钮，第二天就有人送货上门了。我很看好这类融入日常生活的 IoT 设备，实现这类智能少不了一个智能中心，响应程序是 7x24 小时伺服着的，显然不是手机该做的，手机做这事，存个号码打电话嘛。本来用脚趾都能想明白的事，咋就这么费劲呢，我所知道做智能家居的，凡成体系卖智能设备都有一个“家居中心”，如欧瑞博的 ViCenter，Nest 也有个中心，如果单靠智能手机，玩个球。

注：这里用 dash buttons 举例说明手机不是智能中心（手机只人类感观四肢的延伸），与我要创业的内容无关。

### 2. 前所未有的 P2P 形态

想象未来的世界，家家有个不停机的“智能中心”，公共场合、办公场所，带点智能的设备之后，都有智能中心，云端也有成千上万的智能中心，这些中心，如果构成 P2P 网络，能量巨大，各节点稳定性前所未有，像比特币的 P2P，还得靠挖矿机制维持计算能力。在新态势下，P2P 完全可能成为一种基础服务，而不是专用服务，其服务基础到像电话号码一样，微信之所以做成，离得开 QQ 这种号码吗？想象一下这类东西的颠覆能量吧。

参考这篇：[MaidSafe去中心化网络](http://pan.baidu.com/share/link?shareid=1922771516&uk=573819484)


### 3. 彻底去中心化

由此推导的还有“解耦”、Multi-Vendor 等概念，谁都知道 Docker 流行了，但有没有寻求促使它流行的背后动力呢？再有，“微服务”形态，现在还没流行，我相信它注定会流行，去年 AWS 推出 lambda 业务，这是很不起眼的小东西，能力很弱，但如果服务侧很好解耦了，lambda 立显神通，这些都支撑起 Multi-Vendor，不必成天喊颠覆谁，把 Multi-Vendor 支持好了，自然就把 T 给颠覆掉了。

有关 “微服务”，[可参考这篇](http://www.linuxeden.com/html/news/20150526/160970.html)


### 4. 大部分东西都不是小创业者该做的，适合开源的更少

小微创业者着力在点上寻得突破，再结合开源等形式，达到事实成标准后，成功概率还是很大的，昨天我展示的几张图中，有几个机会点。

谁跳进来陪我玩，再深入探讨。

虽然我尝试为 NGSOS 的 “项目3” 做些设想，但连基本组网都达不成一致意见，更别说 “类Meteor” 想做成啥样了，该在什么样的设备上做都弄不清楚？算了，我自个玩先。

&nbsp;

&nbsp;

**17 年 10 月 23 日：给两年前的设想截几张图片**

------------------

两年前我尝试拉人一起做事，没成功。于是就自个找其中不大的技术点做了个项目：[shadow-widget](https://github.com/rewgt/shadow-server)。严格来说，不是一个项目，而是若干有关联的项目，像 shadow-book、shadow-slide、pinp-blogs、shadow-bootstrap 等。就这一系列项目的开发目标，我可以详细说一说，明天继续写。

关于两年前的技术大设想，我未在公众场合透露太多，一方面因为想法还不够成熟，另一方面可能涉及潜在商业秘密，不想多说。现在再评估，情况仍差不多。经历两年多思考、历练，当初设想大致没变，细节有些微调了。

我从 15 年 5 月份写的几份演示胶片截取几页，留作备份，以后方便的时候再解释。<a href="md/res/D171023-01/slides.zip">点此下载</a>

&nbsp;

&nbsp;

**17 年 10 月 24 日：从 shadow-widget 延伸出 ReRest 实践，有何意义？**

------------------

做 shadow-widget 不纯为了搞一个更优的前端框架，前端框架够多了，多我一个又如何？而是，我尝试向今后多看三年，做一个领先的东西。当今三大前端框架：React、Vue、Angular，我认为底子最好，最有潜力的是 React，但 React 的缺陷也很明显，如果不明显的话，根本不会有 Vue 的发展空间。在 shadow-widget 我想实现的目标是：把 React 的不足补上，让本来可以拉开其它框架一段距离的 React 体系，发挥出它该有威力。

以上是第一层面，尝试提供最优的前端框架。

在第二层面，我想探索 Web APP 与 Native APP 走向融合的可能途径。在这个领域业界已有许多探索，Qt 尝试用 C++ 加上 QML 解决 Native 式 Web 开发；Google 用 Native Client （简写为 NaCl）方案解决，就是让网页能跑 C/C++ 开发的程序；Firefox 弄一个 Rust 语言，用它开发可编译程序，嵌到网页中用；还有近些年快速发展的 asm.js 与 Web Assembly，都反映了业界主流厂商在 Web 与 Native 逐步融合所作的各种努力。

已有努力目前看来效果还欠佳，虽说还缺定论，但已有几种尝试差不多能看清了，C++ 加 QML 没戏，Google 的 NaCl 限制条件太多，有点复杂、有点绕，有迹象表明 Google 自己也想放弃了，Rust 语言已做出来，可以用了，据说，语言本身没啥大缺陷，但应用方面未达到预期，Rust 再改进改进，或许还有机会。Web Assembly 还在发展初期，前景尚不明朗。这个领域具有战略高地效应，在此玩耍都是业界大拿，据我所知，国内还有一位大牛，在做 Html5 OS 化方面的创业，不知现在进度怎么样了？

我在编程语言研发上耗过 8 年时间，体验是，Programming Language 既是 Anything，也是 Nothing，搞好了可以强化你的领地，进而成就一个生态，软件领域能有几个生态？目标诱人，难度极大。如果搞不好，当然，大部分新冒出来的语言都属这一类，你所做的工作就是 Nothing。讲到 Web 与 Native 融合，我的思路与别人有些差别，近 5 年，甚至可以把接下去 5 年也算上 —— 新冒出来的编程语言，基本是 “锦上添花”，不会有什么 “雪中送炭” 机会了，已有语言极少有搞不掂的事，某些方面稍微不好用一点，没什么大不了的。Web 与 Native 走向融合是机会点，但如果因此带来若干不便，用户马上会退回去。

所以，改进语言要素本身，可能不是解决问题的重点，让 Web 开发向 Native 靠拢应该更重要。Web 开发算是典型的 GUI 开发，但它与常规 Native APP 开发方式格格不入，如果仅针对 GUI 的开发都无法很好归并 Web 与 Native，弄一套新语言难免白费劲。

第三层面，网页产品开发一个明显趋势是静态化托管。

十年前的网页，可编程能力低下，既要在客户侧以 java、flash 等技术加强，又要在服务侧搞 SOA、三层乃至 N 层 B/S 架构等，体系结构复杂，跨平台困难，总之，缺陷多多。现在网页开发普遍采用响应式风格，前端有 HTML5、ES5、ES6，以及 NodeJs 工具链，也解决了模块化、规模化开发问题。前后端分离变清晰，定义 RESTful API 做交互，后端开发更多向 docker、微服务、serverless 等形态转换。这些变化导致两个直接结果：

1. 静态化页能力变强，以前盛行的 JSP 动态网页技术逐渐式微，现在大部分需求在静态页（当然要加载相关 css 与 js）就能搞掂了，需要动态交互的，用 RESTful API 延伸即可。

2. 服务组装更容易，专业分工比以前更细。这从腾讯 “小程序” 出现与近些年 Serverless 的发展可看出端倪。十年前每家公司搭建网页，做专门请人做设计，现在不必这么麻烦，把现成服务拉过来，集成一下就可以了。

网页静态化趋势的尽头，我们可以用 “文档化” 作概括，写文档就是开发网页。实际上，开发 shadow-widget 是我们想做一系列事情的开端，已完成的 pinp-blogs 项目，既拿来验证 ReRest 编程理念（[详见这里](index.html?page=D171023-02.txt)），还着手试验静态式网页开发模式，以及常见文档类型（类 Word、类 PPT）如何在线可视编辑。

&nbsp;

&nbsp;

**17 年 10 月 30 日：达成路标 1**

------------------

**路标内容**： 形成一流的 “Web 可视化” 开发方法，研发一套行之有效的开发工具

**达成日期**：2017/10/23

**达成标志**：

1. 《前端 MVVM 与 FRP 的升阶实践：ReRest 可视化编程》于 2017/10/23 成稿
2. 相关项目已成熟可用：shadow-widget, shadow-server, shadow-bootstrap   
这几个项目现版本是 v1.1.2，已进入维护期

&nbsp;

Rest 可视化编程的文章在 SegmentFault.com 网站发布，一周了，有 1.1 K 访问量，从点赞数与收藏量来看，宣传效果很好。

&nbsp;

&nbsp;

**17 年 11 月 3 日：达成路标 2**

------------------

**路标内容**： 完成 pinp-blog 项目开发，正式推荐用户使用

**达成日期**：2017/11/03

**达成标志**：

1. 主体功能在半年前就完成，已在 `rewgt/blogs, rewgt/product-blogs, best-js/blogs` 等多个实际博客站点完成验证。
2. 最近针对 github.com 托管增加了 WebHook 触发器，博客的评论功能也完成了。

&nbsp;

&nbsp;
<!-- SLIDE PAGES V1.0, DO NOT CHANGE THIS LINE. -->
<div $=ScenePage key='auto0'></div>
<div $=ScenePage key='auto1' no-show='1'>
  <div $=".pinp.doc_info.thumb" no-show='' left='{-122}' top='{-81}' sty__='{{"background":"url(md/res/D171023-01/niubility.jpeg) no-repeat center","backgroundSize":"100% 100%"}}' klass='default-large-small p1-p2-p3-p0 visible-auto-hidden default-align_center-right' data-group.optid='pinp/blogs/step4' width='{280}' height='{200}'></div>
</div>
